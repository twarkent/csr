# --------------------------------------------------------------------------------------------------
#    field attributes - must be separated by ',' and inside square brackets [ ] 
#    example: [RW, RP, WP]
#      * RW          Read/Write
#      * RO          Read-only
#      * WO          Write-only
#      * W1C         Write '1' to clear
#      * WP[A]       Create a pulse when written. _A pulse stays asserted until acknowledged
#      - RP[A]       Create a pulse when read. _A pulse stays asserted until acknowledged
#      - SUB         Indicates register is wider than DWIDTH
#      - INTERNAL    Indicates signal is internal to CSR block
#
#      Consider these:
#      - COR         Clear on read
#      - SOR         Set on read
#      - STICKY-0    Sticky 0 - Registered input. Stays 0 until W1C
#      - STICKY-1    Sticky 1 - Registered input. Stays 1 until W1C
# --------------------------------------------------------------------------------------------------

design:
  name: DesignName
  desc: Control Status Register Definition
  header: |
    // --------------------------------------------------------------------------------------------------'
    // Copyright (c) <YEAR>  Ixia  All rights reserved.
    //
    //   This file includes unpublished proprietary source code of Ixia.  The copyright
    //   notice above does not evidence any actual or intended publication of such
    //   source code. You shall not disclose such source code (or any related information)
    //   and shall use it only in accordance with the terms of the license or confidentiality
    //   agreements you have entered into with Ixia. Distributed to licensed users or owners.
    //
    // --------------------------------------------------------------------------------------------------
    // FILE NAME      : <FILENAME>
    // CURRENT AUTHOR : csr.py script
    // --------------------------------------------------------------------------------------------------
    // KEYWORDS: <BLOCK> control status registers.
    // --------------------------------------------------------------------------------------------------
    // PURPOSE:  <CPU> <BLOCK> control status registers.
    // --------------------------------------------------------------------------------------------------
    // Parameters
    //   NAME              DEFAULT      DESCRIPTION
    //   ----------------- ------------ -----------------------------------------------------------------
    //   <PARAMETERS>
    // --------------------------------------------------------------------------------------------------
    // Reuse Issues:
    //   Reset Strategy:      Asynchronous
    //   Clock Domains:       <CPU_CLOCK>
    //   Critical Timing:     None
    //   Test Features:       None
    //   Asynchronous I/F:    None
    //   Synthesizable:       Yes
    // --------------------------------------------------------------------------------------------------

  footer: |
    endmodule
    
    // --------------------------------------------------------------------------------------------------
    // Release History
    //   VERSION DATE       AUTHOR        DESCRIPTION
    // --------- ---------- ------------- --------------------------------------------------------------
    //  <VERSION><DATE>     <AUTHOR>      Control Status Register Generation.
    //                                    Do not modify. Changes may be overwritten.
    // --------------------------------------------------------------------------------------------------


  # CPU: ================================================================ 
  cpu:
    name:   Freescale
    bus:    PCIe
    awidth: 20
    dwidth: 64
    access: sync       # Interface synchronized to destination clock
    decode: 4          # Use upper 4 bits for block decoding

    signals:
      clock:       clk
      reset:       rst
      cs:          cs
      write:       wr
      read:        rd
      address:     addr
      write_data:  wdata
      read_data:   rdata
      byte_enable: be

  blocks:
    - name: blk_a
      file: blk_a/blk_a_csr.yaml
      base_addr: 0x10000
    - name: blk_b
      file: blk_b/blk_b_csr.yaml
      base_addr: 0x20000
    - name: blk_c
      file: blk_c/blk_c_csr.yaml
      base_addr: 0x30000


